namespaceOverride: "monitoring"
kubeTargetVersionOverride: "1.20.6"
fullnameOverride: "prom-stack"

kubelet:
  serviceMonitor:
    resourcePath: "/metrics/resource"

kubeControllerManager:
  service:
    enabled: false
  serviceMonitor:
    enabled: false

kubeEtcd:
  service:
    enabled: false
  serviceMonitor:
    enabled: false

kubeProxy:
  service:
    enabled: false
  serviceMonitor:
    enabled: false

kubeScheduler:
  service:
    enabled: false
  serviceMonitor:
    enabled: false

alertmanager:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/auth-signin: https://auth-prometheus.cedi.dev/oauth2/start
      nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth2-proxy-prometheus.svc.cluster.local/oauth2/auth
    hosts:
      - alertmanager.cedi.dev
    pathType: ImplementationSpecific
    paths:
      - /
    tls:
      - secretName: alertmanager-tls-secret
        hosts:
          - alertmanager.cedi.dev

  config:
    route:
      receiver: 'telegram'
      routes:
      - match:
          alertname: Watchdog
        receiver: 'telegram'
    receivers:
      - name: 'telegram'
        telegram_configs:
          - bot_token: 'foobar2342' 
            chat_id: 'foobar2342'
            parse_mode: 'HTML'

  alertmanagerSpec:
    externalUrl: "https://alertmgr.cedi.dev"
    replicas: 1
    storage:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 1Gi

grafana:
  enabled: true
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - grafana.cedi.dev
    paths:
      - /
    tls:
      - secretName: grafana-tls-secret
        hosts:
          - grafana.cedi.dev

prometheusOperator:
  namespaces: ''
  denyNamespaces: ''
  prometheusInstanceNamespaces: ''
  alertmanagerInstanceNamespaces: ''
  thanosRulerInstanceNamespaces: ''

prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/auth-signin: https://auth-prometheus.cedi.dev/oauth2/start
      nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth2-proxy-prometheus.svc.cluster.local/oauth2/auth
    hosts:
      - prometheus.cedi.dev
    pathType: ImplementationSpecific
    paths:
      - /
    tls:
      - secretName: prometheus-tls-secret
        hosts:
          - prometheus.cedi.dev

  prometheusSpec:
    externalUrl: "https://prometheus.cedi.dev"
    replicas: 1
    retention: 30d
    resources:
      limits:
        cpu: "2"
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 64Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 64Gi

    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false

    ruleNamespaceSelector: {}
    ruleSelector: {}
    ruleSelectorNilUsesHelmValues: false
