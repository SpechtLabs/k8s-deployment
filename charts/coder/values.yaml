# coderd -- Primary service responsible for all things Coder!
coderd:
  # coderd.image -- Injected by Coder during release.
  image: ""
  # coderd.replicas -- The number of Kubernetes Pod replicas.
  replicas: 1

  # coderd.serviceSpec -- Specification to inject for the coderd service. See:
  serviceSpec:
    type: ClusterIP

  # Options for customizing the built-in super admin account for managing a
  # Coder installation.
  superAdmin:
    # Options for configuring the secret used to specify the password for the
    # built-in super admin account.
    passwordSecret:
      # coderd.superAdmin.passwordSecret.name -- Name of a secret that should
      # be used to determine the password for the super admin account. The
      # password should be contained in the field `password`, or the manually
      # specified one.
      name: ""
      # coderd.superAdmin.passwordSecret.key -- The key of the secret that
      # contains the super admin password.
      key: "password"

# ingress -- Configure an Ingress to route traffic to Coder services.
ingress:
  # ingress.enable -- A boolean controlling whether to create an Ingress.
  enable: true
  # ingress.host -- The hostname to proxy to the Coder installation.
  # The cluster Ingress Controller typically uses server name indication
  # or the HTTP Host header to route traffic.
  host: "coder.av0.de"
  # ingress.annotations -- Additional annotations to add to the Ingress
  # object. The behavior is typically dependent on the Ingress Controller
  # implementation, and useful for managing features like TLS termination.
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    #nginx.ingress.kubernetes.io/auth-signin: https://auth.av0.de/oauth2/start
    #nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth

  # ingress.tls -- Configures TLS settings for the Ingress.
  tls:
    # ingress.tls.enable -- Determines whether the Ingress handles TLS.
    enable: true
